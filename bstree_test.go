package bsegtree

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"math/rand"
	"sort"
	"testing"
	"time"
)

func TestDedup(t *testing.T) {

	rand.Seed(time.Now().UnixNano())

	s := make([]uint64, 2048+512)
	for i := 0; i < 1024; i++ {
		s[i] = uint64(i)
	}

	exp := make([]uint64, 1024)
	for i := range exp {
		exp[i] = s[i]
	}
	sort.Sort(endpoints(exp))

	// double s
	for i := 1024; i < 2048; i++ {
		s[i] = s[i-1024]
	}
	// tripe 1/2
	for i := 2048; i < 2048+512; i++ {
		s[i] = s[i-2048]
	}

	rand.Shuffle(2048+512, func(i, j int) {
		s[i], s[j] = s[j], s[i]
	})

	act := Dedup(s)

	if len(act) != 1024 {
		t.Fatal("dedup failed: redundant elements still exited")
	}

	for i, v := range act {
		if v != exp[i] {
			t.Fatal("dedup failed: wrong order")
		}
	}
}

type bytess [][]byte

func (e bytess) Len() int {
	return len(e)
}

func (e bytess) Less(i, j int) bool {

	return bytes.Compare(e[i], e[j]) == -1
}

func (e bytess) Swap(i, j int) {
	e[i], e[j] = e[j], e[i]
}

func TestTreeEstimateIntervals(t *testing.T) {

	for i := 0; i < 2048; i += 2 {
		cnt := tree.(*BSTree).estimateIntervals(0, uint64(i))
		if cnt != i/2 +1 {
			t.Fatalf("estimate intervals wrong, exp: %d, got: %d for  %d", i/2+1, cnt, i)
		}
	}
}

// Test segment tree result with serial query:
// both of [from, To] for every interval is 8 bytes.
func TestTreeEqualSerialSameLenInterval(t *testing.T) {

	rand.Seed(time.Now().UnixNano())

	for j := 0; j < 16; j++ {
		tree := New()
		serial := NewSerial()

		from, to := make([]byte, 8), make([]byte, 8)
		min, max := make([]byte, 8), make([]byte, 8)
		hasMin, hasMax := false, false
		for i := 0; i < 1024; i++ {
			fn := rand.Int63n(1000000)
			tn := rand.Int63n(1000000)
			binary.BigEndian.PutUint64(from, uint64(fn))
			binary.BigEndian.PutUint64(to, uint64(tn))

			if bytes.Compare(from, to) == 1 {
				from, to = to, from
			}
			tree.Push(from, to)
			serial.Push(from, to)

			if !hasMin {
				copy(min, from)
				hasMin = true
			} else {
				if bytes.Compare(min, from) == 1 {
					copy(min, from)
				}
			}
			if !hasMax {
				copy(max, to)
				hasMax = true
			} else {
				if bytes.Compare(max, to) == -1 {
					copy(max, to)
				}
			}
		}
		tree.Build()

		cmpQueryWithSerial(t, tree, serial, min, max, 1024, true, false)

		for i := 0; i < 1024; i++ {
			min := rand.Int63n(1000000)
			max := rand.Int63n(1000000)
			binary.BigEndian.PutUint64(from, uint64(min))
			binary.BigEndian.PutUint64(to, uint64(max))

			if bytes.Compare(from, to) == 1 {
				from, to = to, from
			}

			cmpQueryWithSerial(t, tree, serial, from, to, 0, false, false)
			cmpQueryWithSerial(t, tree, serial, from, nil, 0, false, true)
		}
	}
}

// Test segment tree result with serial query:
// [from, To] for every interval is 1-10 bytes.
func TestTreeEqualSerialInterval(t *testing.T) {

	rand.Seed(time.Now().UnixNano())

	for j := 0; j < 16; j++ {
		tree := New()
		serial := NewSerial()

		from, to := make([]byte, 10), make([]byte, 10)
		min, max := make([]byte, 10), make([]byte, 10)
		minN, maxN := 0, 0
		hasMin, hasMax := false, false
		for i := 0; i < 1024; i++ {

			from, to = from[:10], to[:10]

			fn, tn := rand.Intn(11), rand.Intn(11)
			if fn == 0 {
				fn = 1
			}
			if tn == 0 {
				tn = 2
			}
			from, to = from[:fn], to[:tn]
			rand.Read(from)
			rand.Read(to)

			if bytes.Compare(from, to) == 1 {
				from, to = to, from
			}
			tree.Push(from, to)
			serial.Push(from, to)

			if !hasMin {
				copy(min, from)
				hasMin = true
				minN = len(from)
			} else {
				if bytes.Compare(min, from) == 1 {
					copy(min, from)
					minN = len(from)
				}
			}
			if !hasMax {
				copy(max, to)
				hasMax = true
				maxN = len(to)
			} else {
				if bytes.Compare(max, to) == -1 {
					copy(max, to)
					maxN = len(to)
				}
			}
		}
		tree.Build()

		cmpQueryWithSerial(t, tree, serial, min[:minN], max[:maxN], 1024, true, false)

		for i := 0; i < 1024; i++ {
			from, to = from[:10], to[:10]

			fn, tn := rand.Intn(11), rand.Intn(11)
			if fn == 0 {
				fn = 1
			}
			if tn == 0 {
				tn = 2
			}
			from, to = from[:fn], to[:tn]
			rand.Read(from)
			rand.Read(to)

			if bytes.Compare(from, to) == 1 {
				from, to = to, from
			}

			cmpQueryWithSerial(t, tree, serial, from, to, 0, false, false)
			cmpQueryWithSerial(t, tree, serial, from, nil, 0, false, true)
		}
	}
}

func cmpQueryWithSerial(t *testing.T, tree, serial Tree, from, to []byte, expN int, checkExpN, isPoint bool) {

	var treeresult []int
	if !isPoint {
		treeresult = tree.Query(from, to)
	} else {
		treeresult = tree.QueryPoint(from)
	}

	if checkExpN {

		if len(treeresult) != expN { // Test full ranges here.
			t.Fatalf("result count mismatched, exp: %d, got: %d", expN, len(treeresult))
		}
	}

	var serialresult []int
	if !isPoint {
		serialresult = serial.Query(from, to)
	} else {
		serialresult = serial.QueryPoint(from)
	}

	sort.Ints(treeresult)
	sort.Ints(serialresult)

	if len(treeresult) != len(serialresult) {

		t.Fatalf("wrong result length, exp: %d, got: %d for from: %d,  to: %d",
			len(serialresult), len(treeresult), AbbreviatedKey(from), AbbreviatedKey(to))
	}

	for i, act := range treeresult {
		if serialresult[i] != act {
			t.Fatalf("wrong interval id, exp: %d, got: %d", serialresult[i], act)
		}
	}
}

// This testing is designed for reproducing wrong result issue.
// bstree_test.go:172: wrong result length, exp: 297, got: 295 for  824723,  825021
// missing:
// {369 70017 825170}
// {457 824392 883250}
func TestMissingResult(t *testing.T) {

	tree := New()

	tree.(*BSTree).base = []Interval{{ 0,  0xb2fde,  0xd2d66}, { 1,  0x272c7,  0x2d27a}, { 2,  0x4150a,  0x7b67d}, { 3,  0xce70c,  0xeacc6}, { 4,  0x27ba,  0x1cc92}, { 5,  0x664da,  0xe354b}, { 6,  0x20f16,  0x6262c}, { 7,  0x67391,  0x75c50}, { 8,  0xd657,  0x5b068}, { 9,  0xd193e,  0xd4459}, { 10,  0x5ecaf,  0xceb67}, { 11,  0x4c5be,  0xc9918}, { 12,  0x463e7,  0xd99bc}, { 13,  0xac7be,  0xd2a47}, { 14,  0x1c516,  0xadf0e}, { 15,  0x12308,  0xbe5cf}, { 16,  0x5c0b3,  0xf2574}, { 17,  0xdac,  0x75e26}, { 18,  0x189cb,  0x473cb}, { 19,  0x2e490,  0xd19ff}, { 20,  0x63516,  0xebafc}, { 21,  0x188a3,  0xb3032}, { 22,  0x9ebe9,  0xab0e7}, { 23,  0xde0d,  0x85c51}, { 24,  0x69825,  0x77076}, { 25,  0x4a54f,  0x60333}, { 26,  0x6e78f,  0xa4aa5}, { 27,  0x4538d,  0x57cd3}, { 28,  0x8ddc2,  0xd7a13}, { 29,  0xb0026,  0xc2cf0}, { 30,  0x3f4c5,  0x6a13a}, { 31,  0x2a431,  0xeb78c}, { 32,  0xceca6,  0xf08f9}, { 33,  0x69a81,  0xb34a4}, { 34,  0xda614,  0xf36ea}, { 35,  0x54908,  0xd5d69}, { 36,  0x3165b,  0xc2de1}, { 37,  0x965f7,  0x9ec14}, { 38,  0x2586a,  0x34764}, { 39,  0xa1d2f,  0xa7cce}, { 40,  0xaa641,  0xb3fa5}, { 41,  0x730c8,  0xd89c8}, { 42,  0xe56b,  0x4285c}, { 43,  0x5146,  0x4631a}, { 44,  0x2069d,  0xe32b4}, { 45,  0x32c12,  0x4e710}, { 46,  0x1b931,  0x1ee70}, { 47,  0xdc080,  0xe2dd8}, { 48,  0x1c0ce,  0xb485c}, { 49,  0x1b8fc,  0xe1504}, { 50,  0xe6075,  0xeadd3}, { 51,  0xb70aa,  0xcf087}, { 52,  0xdee64,  0xee5db}, { 53,  0x2896d,  0xb03eb}, { 54,  0x8a0f,  0x81280}, { 55,  0x214fa,  0x68f52}, { 56,  0x8fa16,  0xba72f}, { 57,  0x836c6,  0x93300}, { 58,  0x34320,  0xb1643}, { 59,  0x2e8ff,  0x58bb4}, { 60,  0x13b54,  0xb5d77}, { 61,  0x7b849,  0xd61ab}, { 62,  0x89772,  0xdadf8}, { 63,  0x12dfa,  0x5d588}, { 64,  0x5d4ed,  0xdeca1}, { 65,  0x39bec,  0x726ef}, { 66,  0x2b0ad,  0x52987}, { 67,  0x3fc7a,  0x46be3}, { 68,  0xdac43,  0xe1dfb}, { 69,  0x33bd,  0xcf73}, { 70,  0x2c978,  0xcfab0}, { 71,  0xabad5,  0xf0104}, { 72,  0xfe53,  0x2be8a}, { 73,  0xcc4b6,  0xd0829}, { 74,  0xd65b2,  0xe5b8b}, { 75,  0x9f1c,  0xd5237}, { 76,  0x2c0ce,  0xbe1d8}, { 77,  0x73eaf,  0xb6a08}, { 78,  0xe6cf9,  0xf1141}, { 79,  0x131c7,  0x9137f}, { 80,  0x5e037,  0x8571d}, { 81,  0xdd3c4,  0xdf34e}, { 82,  0x9406a,  0xc45cd}, { 83,  0xce3fa,  0xefe92}, { 84,  0x47b7c,  0xd74b7}, { 85,  0x16b1c,  0xd2064}, { 86,  0x1ca1a,  0x43879}, { 87,  0x3caa1,  0xa5ea6}, { 88,  0xae9d2,  0xcd157}, { 89,  0x214a0,  0x6c928}, { 90,  0x46246,  0x49f54}, { 91,  0x7ea7c,  0xcf143}, { 92,  0xc914b,  0xcb014}, { 93,  0x480c0,  0x5e127}, { 94,  0x286a5,  0x629d6}, { 95,  0x821bf,  0xcfee2}, { 96,  0x5884a,  0xebf23}, { 97,  0x5c115,  0xbdcdc}, { 98,  0x32aa3,  0x47d11}, { 99,  0x921c1,  0x95de2}, { 100,  0x1ea6d,  0x2277d}, { 101,  0x4ec6f,  0x56d43}, { 102,  0x31255,  0x8c890}, { 103,  0x5d5b2,  0xca6f7}, { 104,  0xf4ec,  0x6f8ee}, { 105,  0x4436a,  0xe4499}, { 106,  0x634de,  0x985eb}, { 107,  0x87dcf,  0xae060}, { 108,  0x294ef,  0xc6736}, { 109,  0x71219,  0xb4442}, { 110,  0x1a282,  0x45846}, { 111,  0x5fff2,  0x632dd}, { 112,  0x1181b,  0xc7c23}, { 113,  0x738c7,  0x9d28a}, { 114,  0x82af2,  0xbf7cd}, { 115,  0x7d005,  0xe80d7}, { 116,  0xbd9ab,  0xd50d8}, { 117,  0x4f74d,  0x85f4e}, { 118,  0x27edf,  0xb595f}, { 119,  0x35256,  0x8f9da}, { 120,  0x70c0d,  0xd02fc}, { 121,  0x2596,  0xefce2}, { 122,  0x43978,  0xbeef3}, { 123,  0x4967f,  0xc7935}, { 124,  0x32b7,  0x8d43b}, { 125,  0x26591,  0xa89e4}, { 126,  0x2794f,  0x94b02}, { 127,  0x9bc4,  0x32b34}, { 128,  0x16842,  0x797a7}, { 129,  0x1b6d2,  0x4210a}, { 130,  0x92844,  0xb8c6d}, { 131,  0xaa664,  0xf3b26}, { 132,  0x74cad,  0xd28a6}, { 133,  0xb22f6,  0xb8abf}, { 134,  0x3c1fd,  0xeb4bc}, { 135,  0x8e717,  0x95b02}, { 136,  0x310fb,  0xaa55e}, { 137,  0x18673,  0x43070}, { 138,  0x209d,  0xdd159}, { 139,  0x3bc4f,  0x7038f}, { 140,  0x21c37,  0x7839b}, { 141,  0x1212e,  0x1f9ee}, { 142,  0x765ec,  0x8fad0}, { 143,  0x5e097,  0xef4c9}, { 144,  0x5206a,  0xd0241}, { 145,  0x3e975,  0xb0dbe}, { 146,  0x147cc,  0x9fcdd}, { 147,  0x91ec7,  0x9db52}, { 148,  0x37a9a,  0x4e8b9}, { 149,  0x56f5,  0x96cb3}, { 150,  0xbb246,  0xc6b4f}, { 151,  0x51757,  0xbfcd3}, { 152,  0x7427d,  0xc9858}, { 153,  0x5929,  0x75fbe}, { 154,  0x4e807,  0x5a936}, { 155,  0x3a82b,  0xed88b}, { 156,  0x6bc05,  0xac165}, { 157,  0x1e6b1,  0xa58cf}, { 158,  0x6cc36,  0xb9021}, { 159,  0x12bf8,  0x5cbb8}, { 160,  0x2529a,  0x7905a}, { 161,  0x6de0f,  0x77705}, { 162,  0x15515,  0x267fa}, { 163,  0x8476b,  0xbc4ba}, { 164,  0xd8de,  0xf370e}, { 165,  0x7b509,  0xe69fb}, { 166,  0x2652c,  0x9514a}, { 167,  0x7f96a,  0xa8e6c}, { 168,  0x116d,  0xba06a}, { 169,  0x112c1,  0x25e8c}, { 170,  0x24c9e,  0x50f45}, { 171,  0x3a404,  0xad147}, { 172,  0x36f2c,  0x81995}, { 173,  0x4c20e,  0x593d2}, { 174,  0xb21ea,  0xeabd8}, { 175,  0x981eb,  0x9a982}, { 176,  0xe4d3,  0xdc4ed}, { 177,  0x53ed,  0x2de3b}, { 178,  0x33e62,  0xd885c}, { 179,  0xc862a,  0xeb325}, { 180,  0xa6381,  0xf224b}, { 181,  0x667,  0x3bdda}, { 182,  0x27a26,  0x7ffe8}, { 183,  0x5613d,  0xc07bb}, { 184,  0x432d5,  0x7270e}, { 185,  0x85767,  0x98a85}, { 186,  0x3ddaa,  0x9a88d}, { 187,  0x333b8,  0x79778}, { 188,  0x104ca,  0x66dde}, { 189,  0x3cd07,  0xbeefb}, { 190,  0x13fb7,  0x3f1d9}, { 191,  0x27236,  0xee818}, { 192,  0x5c5f2,  0xaad4c}, { 193,  0xa8f04,  0xb3425}, { 194,  0x1c3a2,  0xb4eb2}, { 195,  0x6b13b,  0x841b9}, { 196,  0x31e02,  0xd01a6}, { 197,  0x34f9c,  0xd6338}, { 198,  0x1a3f7,  0xebfc5}, { 199,  0x47ac2,  0xcf34f}, { 200,  0x40450,  0x94608}, { 201,  0x3fcd4,  0x418a9}, { 202,  0x1c5a7,  0xaa955}, { 203,  0xbfd,  0x8c4e8}, { 204,  0x49f60,  0x8daf8}, { 205,  0x19779,  0xdf02f}, { 206,  0x7acee,  0xda674}, { 207,  0x81ea6,  0xd43f3}, { 208,  0xb3caf,  0xdf9f4}, { 209,  0x4ded4,  0x5fb13}, { 210,  0x343e6,  0xe47f2}, { 211,  0x31097,  0x9bd1e}, { 212,  0x44f9b,  0xe8c10}, { 213,  0xa27e,  0x9bfa7}, { 214,  0x97530,  0xf34c3}, { 215,  0x78442,  0x8593d}, { 216,  0x5391f,  0x7c460}, { 217,  0xc3556,  0xd91a5}, { 218,  0x4cf60,  0x68f06}, { 219,  0x54d0e,  0x75574}, { 220,  0x925f3,  0x97186}, { 221,  0x32fba,  0x38662}, { 222,  0x8f11e,  0xda048}, { 223,  0xe0b7a,  0xe51b2}, { 224,  0x4b07f,  0xcf343}, { 225,  0x9ac48,  0xa556d}, { 226,  0x508d3,  0x84163}, { 227,  0x88dc5,  0xe28fa}, { 228,  0x5acf3,  0xca25c}, { 229,  0x42c40,  0x68f84}, { 230,  0x21410,  0xaaa1a}, { 231,  0x22de7,  0xac8c3}, { 232,  0x5c112,  0xb35ab}, { 233,  0x76dcb,  0xe00c2}, { 234,  0x1f926,  0xedf5f}, { 235,  0x31b09,  0xaaffb}, { 236,  0x5ccd3,  0xa48ea}, { 237,  0x98cfc,  0xdf386}, { 238,  0x4842e,  0x4c1aa}, { 239,  0x316a7,  0x73d70}, { 240,  0x34b11,  0xcd472}, { 241,  0x9fc77,  0xadaf2}, { 242,  0x54b29,  0xef260}, { 243,  0x21c6d,  0x715ef}, { 244,  0x80e59,  0xb9569}, { 245,  0x50698,  0x9fa2d}, { 246,  0x506a7,  0xf26d1}, { 247,  0x7f481,  0xb6c39}, { 248,  0x733b5,  0x85b9e}, { 249,  0x621fc,  0x804e4}, { 250,  0xb2226,  0xb6926}, { 251,  0x2ee80,  0x56138}, { 252,  0x10137,  0xe509e}, { 253,  0x63ac9,  0xd4401}, { 254,  0x17577,  0xba230}, { 255,  0xc8dfb,  0xe223c}, { 256,  0x7bc25,  0x8440a}, { 257,  0x18a43,  0xd54ac}, { 258,  0x1da47,  0x9320a}, { 259,  0xa15c9,  0xf2338}, { 260,  0x5417f,  0x882b8}, { 261,  0x615b2,  0x98088}, { 262,  0x6696b,  0x8d50a}, { 263,  0x293cf,  0x85bfb}, { 264,  0x4d8a9,  0xe74ae}, { 265,  0xa97d4,  0xdd5d8}, { 266,  0xd05fb,  0xd3811}, { 267,  0x77eee,  0xdc7d1}, { 268,  0x549ef,  0x92848}, { 269,  0x251b7,  0xb750b}, { 270,  0xbbd2b,  0xbfbb9}, { 271,  0x76b2,  0x7754e}, { 272,  0x85773,  0xb21e3}, { 273,  0x85c47,  0xeae60}, { 274,  0xe7657,  0xed321}, { 275,  0x2c555,  0xb1727}, { 276,  0x67d18,  0x69ca3}, { 277,  0x2fd74,  0xcca19}, { 278,  0x68319,  0x7c60a}, { 279,  0xec23e,  0xecaf7}, { 280,  0xd2dbe,  0xdda3c}, { 281,  0xa25c7,  0xc0227}, { 282,  0x3c552,  0xaae77}, { 283,  0x20b1d,  0x924a9}, { 284,  0x5f7cc,  0xd2963}, { 285,  0x695a8,  0xc20eb}, { 286,  0x5d725,  0xa70ed}, { 287,  0xfecc,  0x3b33f}, { 288,  0xd27d,  0x8e558}, { 289,  0x29611,  0xb5e51}, { 290,  0x44d6,  0x41a0e}, { 291,  0x1533,  0xaa8c5}, { 292,  0x43303,  0xcd544}, { 293,  0x29eab,  0x3f218}, { 294,  0x9144,  0x91ea6}, { 295,  0x9471c,  0xd9624}, { 296,  0xd0d41,  0xef784}, { 297,  0x2c2ed,  0xae87f}, { 298,  0x49edd,  0xa8c4f}, { 299,  0x4bf69,  0xf37f1}, { 300,  0x47fb4,  0x6a502}, { 301,  0x1c2bd,  0xa39e1}, { 302,  0x27052,  0xbb99d}, { 303,  0x4fc1a,  0x752c8}, { 304,  0x23cb1,  0x87992}, { 305,  0x2e3e7,  0xa1509}, { 306,  0x35d2a,  0x527cb}, { 307,  0x479cb,  0x8dc56}, { 308,  0xe64c1,  0xe7e6f}, { 309,  0x5cdf7,  0x6d124}, { 310,  0x948e9,  0xbb9fe}, { 311,  0x6a7ba,  0xdc402}, { 312,  0x3836a,  0xdfe11}, { 313,  0xd3f54,  0xf32c6}, { 314,  0xc36aa,  0xe4af4}, { 315,  0x51391,  0xb6fe0}, { 316,  0x13421,  0xe1389}, { 317,  0xbb748,  0xe5135}, { 318,  0x39d2e,  0x582f0}, { 319,  0x80f37,  0x8b031}, { 320,  0x2862e,  0x2aeb4}, { 321,  0x44081,  0xdfe50}, { 322,  0x1b569,  0xd4cf2}, { 323,  0x2ac74,  0xc8d1d}, { 324,  0x1f60e,  0xb6241}, { 325,  0x5e7c,  0x1e270}, { 326,  0x83ba6,  0xac962}, { 327,  0x99c08,  0x9a9bd}, { 328,  0x37c1b,  0xd4e6c}, { 329,  0x64534,  0xf34e5}, { 330,  0x6172f,  0x90329}, { 331,  0x18945,  0x6798c}, { 332,  0x247a8,  0x3b87d}, { 333,  0x9ec56,  0x9f0d6}, { 334,  0x11943,  0x215bd}, { 335,  0x221b6,  0xcba08}, { 336,  0x5386c,  0x590e8}, { 337,  0x260a8,  0xe0a91}, { 338,  0x40d53,  0x70eaf}, { 339,  0xbdb43,  0xc303e}, { 340,  0x635e,  0x22ed7}, { 341,  0x3efe3,  0x6f08c}, { 342,  0x1f553,  0x287dd}, { 343,  0xc13b4,  0xc4cc2}, { 344,  0x6afc,  0x41c0b}, { 345,  0x696f7,  0x92fff}, { 346,  0x368cc,  0xd8f2f}, { 347,  0x700ec,  0xbc3bb}, { 348,  0x430e0,  0x56ccb}, { 349,  0xae76d,  0xf19d7}, { 350,  0x249db,  0x5c76f}, { 351,  0x38a5e,  0x7f370}, { 352,  0xa02e4,  0xa1a0b}, { 353,  0xd95a,  0x6f21b}, { 354,  0x5e967,  0xf0ca9}, { 355,  0x62930,  0xa64cf}, { 356,  0x3f932,  0xbfaf3}, { 357,  0x8535e,  0xeadfa}, { 358,  0x77c31,  0xb0618}, { 359,  0x8591a,  0xa7069}, { 360,  0x80988,  0xde37f}, { 361,  0x118e8,  0x5e7c9}, { 362,  0x1f697,  0x62970}, { 363,  0x7f1d2,  0x9c919}, { 364,  0x51865,  0xa4431}, { 365,  0x3cc5e,  0x603b8}, { 366,  0x194,  0x35076}, { 367,  0x15b70,  0xb5558}, { 368,  0xd848,  0x2fb17}, { 369,  0x11181,  0xc9752}, { 370,  0x16f2f,  0x9d0c9}, { 371,  0x1f6c4,  0x70559}, { 372,  0x919fe,  0x96c50}, { 373,  0x17abe,  0xb185d}, { 374,  0x3a5ff,  0x7456c}, { 375,  0x5d531,  0x7aeb2}, { 376,  0x43947,  0xba783}, { 377,  0x8fe64,  0xa9a5b}, { 378,  0x12bd7,  0xc8182}, { 379,  0x5ea45,  0xdfe45}, { 380,  0x6fd98,  0xd427d}, { 381,  0x7a1e1,  0xd34ee}, { 382,  0x243a6,  0x79d11}, { 383,  0x11658,  0x575f0}, { 384,  0x1095e,  0xa58e2}, { 385,  0x32589,  0x5e4c3}, { 386,  0x56ece,  0x90ae0}, { 387,  0xade78,  0xd4874}, { 388,  0x26c53,  0x48cb7}, { 389,  0x5a5fa,  0xc2ec2}, { 390,  0x804e3,  0xa2a56}, { 391,  0x8abd8,  0xd358e}, { 392,  0x9d0c5,  0xd88d2}, { 393,  0x2b1c0,  0x336b2}, { 394,  0x54606,  0x95849}, { 395,  0x2f50a,  0xc910c}, { 396,  0x28d5f,  0xad094}, { 397,  0x6908,  0xd2dff}, { 398,  0x52049,  0xc072d}, { 399,  0x4260d,  0xde445}, { 400,  0x4df05,  0x57c72}, { 401,  0x310a9,  0x4f383}, { 402,  0x1ebf7,  0xabf73}, { 403,  0x418ce,  0x6e57c}, { 404,  0xcd51b,  0xe958b}, { 405,  0xa365e,  0xe8607}, { 406,  0x28f2b,  0x2b0e0}, { 407,  0x86a3a,  0x921e2}, { 408,  0x759cc,  0xadb60}, { 409,  0x230d,  0x8f20b}, { 410,  0x2baa5,  0x80eb0}, { 411,  0xa1477,  0xdac16}, { 412,  0x3560b,  0xdaebc}, { 413,  0x5eada,  0xe6c9b}, { 414,  0x755ba,  0xdc5fc}, { 415,  0xbfc21,  0xcb5f6}, { 416,  0x40c92,  0x93c83}, { 417,  0x7be08,  0x85699}, { 418,  0x66fa9,  0x6db54}, { 419,  0x33c3c,  0x73341}, { 420,  0x9b231,  0xde4c8}, { 421,  0x91487,  0xe5ad9}, { 422,  0x8380a,  0xdc343}, { 423,  0xe2b0c,  0xed0ff}, { 424,  0xf813,  0x22b48}, { 425,  0x3c149,  0x89ffa}, { 426,  0x2ae84,  0x8b08d}, { 427,  0x47ea,  0xcbe0b}, { 428,  0x7a680,  0xf3ad5}, { 429,  0x2e667,  0x9d727}, { 430,  0xbe9ad,  0xc49da}, { 431,  0x498c8,  0x5eb8b}, { 432,  0x1ec0b,  0xaaf5e}, { 433,  0x278da,  0x4d7d6}, { 434,  0x80383,  0x83a43}, { 435,  0x2a5cf,  0x95c33}, { 436,  0x606a,  0x7425e}, { 437,  0x65941,  0x8f07a}, { 438,  0x55e74,  0x9ac5d}, { 439,  0xb78d5,  0xbcb54}, { 440,  0x2b5e6,  0xcaa02}, { 441,  0x67044,  0x72ee4}, { 442,  0x8e41a,  0xc0fe2}, { 443,  0xa01c2,  0xa60b9}, { 444,  0x11c6f,  0x11db1}, { 445,  0x5d5d,  0xd33e3}, { 446,  0x3f574,  0xb6c87}, { 447,  0x35300,  0x7d37b}, { 448,  0x70dec,  0x76cdf}, { 449,  0x9ed63,  0xd354f}, { 450,  0x61331,  0xe8720}, { 451,  0x8e406,  0xeea7a}, { 452,  0xaa0d4,  0xd680a}, { 453,  0x293fe,  0x8e057}, { 454,  0xa9a47,  0xac13b}, { 455,  0x3c381,  0x5654f}, { 456,  0xb06e,  0x64b17}, { 457,  0xc9448,  0xd7a32}, { 458,  0x51e9d,  0x7d106}, { 459,  0x14bb4,  0x406e2}, { 460,  0x785d,  0xd6dd9}, { 461,  0x72ab2,  0xd48f2}, { 462,  0xbf55a,  0xd7291}, { 463,  0x1ea22,  0xe075e}, { 464,  0x58331,  0xbfc57}, { 465,  0x25a9f,  0xa5a2a}, { 466,  0x57414,  0x79a49}, { 467,  0x17e13,  0x60569}, { 468,  0x2e038,  0xabe2a}, { 469,  0x76720,  0x9fcb1}, { 470,  0xc5602,  0xd7ae7}, { 471,  0x1eba0,  0xba7af}, { 472,  0x7ef74,  0xccb75}, { 473,  0x480af,  0x64b2d}, { 474,  0xadbad,  0xb1d17}, { 475,  0x50793,  0x60976}, { 476,  0x373ef,  0x5256c}, { 477,  0x7c2a9,  0x9c5e4}, { 478,  0x33b4d,  0xee2fe}, { 479,  0x5adf,  0x15b15}, { 480,  0x46ff8,  0xe0221}, { 481,  0x34937,  0x4dd13}, { 482,  0x97e1,  0xad319}, { 483,  0x64571,  0x6e0f7}, { 484,  0x8def2,  0xa50bc}, { 485,  0x7eeba,  0xd6193}, { 486,  0x7d77f,  0xe946c}, { 487,  0x343fe,  0xe5196}, { 488,  0x46250,  0x7bd33}, { 489,  0x683cb,  0xe3b85}, { 490,  0x2fe21,  0xa81e7}, { 491,  0xc08e,  0x1aa5f}, { 492,  0xb31f9,  0xed559}, { 493,  0x8a7ae,  0xc4537}, { 494,  0xab71,  0xa8dc9}, { 495,  0x1a1ce,  0x3c426}, { 496,  0x3fb6d,  0x45fdb}, { 497,  0x7ab6b,  0xc9c03}, { 498,  0xc679a,  0xe6b29}, { 499,  0xc1392,  0xe7b94}, { 500,  0xaf43f,  0xd93cd}, { 501,  0x6a51d,  0x8dc15}, { 502,  0x10185,  0x5813d}, { 503,  0x55920,  0x7e816}, { 504,  0x840dc,  0x8cb80}, { 505,  0x2d728,  0x713c0}, { 506,  0xa3417,  0xb6a27}, { 507,  0xba4b9,  0xd4886}, { 508,  0xad1bc,  0xe1d37}, { 509,  0x3830b,  0x81a3f}, { 510,  0x34ab2,  0x8b2df}, { 511,  0x66666,  0xbc4a5}, { 512,  0x4afd7,  0x53b60}, { 513,  0xa345a,  0xd0bcd}, { 514,  0x6fc60,  0xc424a}, { 515,  0x53415,  0x7a82e}, { 516,  0x67760,  0xb2ba4}, { 517,  0xb0024,  0xb0bd6}, { 518,  0xad39e,  0xf2153}, { 519,  0xa9ce3,  0xc4678}, { 520,  0x2c483,  0xaaf0f}, { 521,  0xab7b8,  0xe1fe3}, { 522,  0xedc2,  0x9b48f}, { 523,  0x2816e,  0x8797e}, { 524,  0x7bc71,  0xa97e7}, { 525,  0x5f2b5,  0x94960}, { 526,  0x40402,  0xa39dd}, { 527,  0x939c8,  0xd5c57}, { 528,  0x7f2da,  0xae691}, { 529,  0x4e3f2,  0xee3d5}, { 530,  0x2a3ce,  0xb2653}, { 531,  0x5526,  0x42cc0}, { 532,  0x6677f,  0xefcd4}, { 533,  0x91ce3,  0xc0199}, { 534,  0x5e8d8,  0x78db0}, { 535,  0x38538,  0x74e30}, { 536,  0x7ced7,  0xcea3d}, { 537,  0x39d87,  0x6eca9}, { 538,  0x2adc8,  0x50700}, { 539,  0xdbcf,  0x62d2e}, { 540,  0xb8661,  0xe61b8}, { 541,  0x32188,  0xc4c07}, { 542,  0x3c7f5,  0x5c787}, { 543,  0x9673,  0xd385b}, { 544,  0x67412,  0x9682c}, { 545,  0x33eed,  0x57fc3}, { 546,  0x4d712,  0xe3d34}, { 547,  0x34e1f,  0x9d360}, { 548,  0x9e3ef,  0xd5038}, { 549,  0x6ded4,  0xaf181}, { 550,  0x27aac,  0x6eb73}, { 551,  0x93b14,  0x9e3fd}, { 552,  0x75956,  0xa2e8e}, { 553,  0x56ae7,  0x750ae}, { 554,  0x660c,  0x4367f}, { 555,  0x7a933,  0xcc9e9}, { 556,  0x1009,  0x9ad5f}, { 557,  0xaaba,  0xe2689}, { 558,  0xa83c6,  0xdf5be}, { 559,  0x74ae4,  0xe7abe}, { 560,  0x3db4,  0xa9896}, { 561,  0x28fc4,  0x5ee16}, { 562,  0x28f7c,  0x90750}, { 563,  0x38416,  0x96a43}, { 564,  0x1e5b2,  0x8f529}, { 565,  0x9791d,  0xf2731}, { 566,  0xfe52,  0x86f28}, { 567,  0xcdd31,  0xedda9}, { 568,  0x51df9,  0x942f6}, { 569,  0xad5f,  0x2cda7}, { 570,  0x3c95,  0x6bfd4}, { 571,  0x4031,  0x6adfb}, { 572,  0xb5b7e,  0xcffd5}, { 573,  0x67e7a,  0xf4135}, { 574,  0x1df6b,  0x56b65}, { 575,  0x84c47,  0x940e6}, { 576,  0x22206,  0x75878}, { 577,  0x6bfc5,  0x92fc9}, { 578,  0x5a45b,  0x7e4c9}, { 579,  0x526dc,  0xf152f}, { 580,  0x2114a,  0x4a85a}, { 581,  0x419e3,  0xb8f27}, { 582,  0x6e132,  0x7e07c}, { 583,  0x1eafc,  0xe60fe}, { 584,  0x5bef9,  0x73993}, { 585,  0x52421,  0x5bc26}, { 586,  0x8c55a,  0xbd549}, { 587,  0x6cb29,  0xb8a0e}, { 588,  0x4bb72,  0x90bc6}, { 589,  0xaeb3f,  0xd04eb}, { 590,  0x29dfa,  0xeb77c}, { 591,  0x495fe,  0xf04d3}, { 592,  0x383f,  0xe4aa7}, { 593,  0x25200,  0xc4ce8}, { 594,  0x7e639,  0xcd91e}, { 595,  0x8522,  0xe20f8}, { 596,  0x58971,  0xba5a5}, { 597,  0x682c8,  0x72558}, { 598,  0xb27b6,  0xf3235}, { 599,  0x5fa36,  0xf3e1f}, { 600,  0x2e8c4,  0x50b26}, { 601,  0x32287,  0x49530}, { 602,  0x1106e,  0xc59b2}, { 603,  0x569c5,  0xdf0dd}, { 604,  0xb8ed5,  0xc80e7}, { 605,  0x6740e,  0xd1a19}, { 606,  0x20fdc,  0x9d772}, { 607,  0x58b6f,  0x84ac1}, { 608,  0x3d8dc,  0x79411}, { 609,  0x62dfd,  0xedeb8}, { 610,  0x1338,  0x7ddd9}, { 611,  0x4b72d,  0x52bf7}, { 612,  0x7af82,  0x941e6}, { 613,  0x2010,  0x43a67}, { 614,  0x3cc8d,  0x9e307}, { 615,  0x18e40,  0x3de49}, { 616,  0x382a6,  0xdf2a7}, { 617,  0x26d0c,  0x3a961}, { 618,  0x3e5c7,  0xc07c1}, { 619,  0x4102a,  0xae552}, { 620,  0x6c5c4,  0x91e00}, { 621,  0x7ede7,  0xd71aa}, { 622,  0x41036,  0x52841}, { 623,  0x50144,  0x8025d}, { 624,  0x95e72,  0xbfdb4}, { 625,  0x48e7d,  0x68a20}, { 626,  0xaeae,  0xb3884}, { 627,  0x5aa95,  0x70c2d}, { 628,  0x35d55,  0xc22cf}, { 629,  0x42ed0,  0xd1469}, { 630,  0x53e9d,  0xa4779}, { 631,  0x4f546,  0xef03a}, { 632,  0x45280,  0x74041}, { 633,  0x65cec,  0xdac61}, { 634,  0x1ec1a,  0x21a5f}, { 635,  0x3f58f,  0x5a275}, { 636,  0x4ecbc,  0x90a15}, { 637,  0xbae23,  0xc269a}, { 638,  0x9f558,  0xb0eb3}, { 639,  0x1a27e,  0x1e50d}, { 640,  0x793d1,  0xdfd4c}, { 641,  0xe0d44,  0xe8cd3}, { 642,  0x85825,  0x9e5d7}, { 643,  0xa38da,  0xdabe4}, { 644,  0x28008,  0xdd390}, { 645,  0x2cada,  0xd7b52}, { 646,  0x5534,  0x976a8}, { 647,  0x9e70,  0x8f013}, { 648,  0x6d162,  0xbd257}, { 649,  0x20956,  0x88149}, { 650,  0x400f6,  0x49e19}, { 651,  0x6e99b,  0xd14f9}, { 652,  0x5884d,  0x964f5}, { 653,  0x19105,  0xb033b}, { 654,  0x6f08e,  0xd49ff}, { 655,  0x36971,  0x574ae}, { 656,  0x5caaa,  0xa72dc}, { 657,  0x39ddd,  0xa8221}, { 658,  0x9b7f,  0x832ca}, { 659,  0x9e660,  0xebe51}, { 660,  0x53231,  0x714c5}, { 661,  0x19866,  0xa93eb}, { 662,  0x869c,  0x878f8}, { 663,  0x20110,  0x56806}, { 664,  0x2716,  0x18c1a}, { 665,  0x90bc2,  0xb0d62}, { 666,  0x503ec,  0x741a5}, { 667,  0xc6ce7,  0xe70f1}, { 668,  0x8d94b,  0xa33dd}, { 669,  0x96d9,  0x92a0c}, { 670,  0x1fbf0,  0xc032d}, { 671,  0x8e920,  0xb9238}, { 672,  0x6804f,  0x8e058}, { 673,  0x87876,  0xa3f4f}, { 674,  0x4e6f2,  0x9b321}, { 675,  0x4ec,  0x6fdc4}, { 676,  0xa481f,  0xda395}, { 677,  0x7baf3,  0xd011f}, { 678,  0x6c787,  0xee267}, { 679,  0xd095e,  0xf0878}, { 680,  0x4cfba,  0x82c07}, { 681,  0x3036,  0x2bf05}, { 682,  0x46ac4,  0x850f9}, { 683,  0x14e5c,  0x39317}, { 684,  0x24390,  0x4fa78}, { 685,  0xe7be5,  0xeaea6}, { 686,  0x39104,  0xd3527}, { 687,  0xc6163,  0xe591b}, { 688,  0x16799,  0x7bd76}, { 689,  0xad9b5,  0xd5417}, { 690,  0x33e77,  0x4850e}, { 691,  0x1d800,  0x21460}, { 692,  0xa05a1,  0xa1586}, { 693,  0x5b603,  0xc1b5d}, { 694,  0x90e9f,  0xacb16}, { 695,  0x87714,  0xcc150}, { 696,  0x1d969,  0x1f8c8}, { 697,  0x41f,  0x65b34}, { 698,  0x7d5ca,  0xbfc5a}, { 699,  0x34a08,  0xe54aa}, { 700,  0xa4ca8,  0xbf7a2}, { 701,  0x24eba,  0x63e0a}, { 702,  0x5053a,  0x8901f}, { 703,  0x8839b,  0xa7ced}, { 704,  0x5e5b6,  0xa117c}, { 705,  0x29956,  0xc539f}, { 706,  0xa8dd1,  0xd8d1a}, { 707,  0x13ecc,  0xe4462}, { 708,  0x64f9c,  0x96d06}, { 709,  0x2afd5,  0xc439c}, { 710,  0x2b6c7,  0x90da5}, { 711,  0x4da06,  0xa49a5}, { 712,  0x63d3,  0xae745}, { 713,  0xbea6e,  0xe7fd1}, { 714,  0x7692,  0x2f7f5}, { 715,  0x328fa,  0x9ba5f}, { 716,  0x39358,  0xa9334}, { 717,  0x4a765,  0xedb5d}, { 718,  0x8bff2,  0xd7ea3}, { 719,  0x32b50,  0x39b13}, { 720,  0x1a681,  0xb277f}, { 721,  0x3b9ac,  0xc977a}, { 722,  0x2b16,  0xeff8a}, { 723,  0x7320a,  0xa2c96}, { 724,  0x4a6da,  0xb901f}, { 725,  0x1f979,  0x74cc9}, { 726,  0x26fbb,  0xef1ae}, { 727,  0x4f286,  0x5599b}, { 728,  0x58e11,  0xb1421}, { 729,  0x3f988,  0xefb6c}, { 730,  0xa54e9,  0xb028d}, { 731,  0x82ba2,  0xb99e3}, { 732,  0xe198d,  0xe8c0c}, { 733,  0x1e58,  0x695f5}, { 734,  0x7e3e,  0x798b2}, { 735,  0x16754,  0x5db80}, { 736,  0x1e7ea,  0x9e2fc}, { 737,  0x5619e,  0xccf73}, { 738,  0xdd861,  0xe91ca}, { 739,  0xd5a3,  0x32901}, { 740,  0x27ac7,  0x61196}, { 741,  0x62f21,  0x78436}, { 742,  0x9cc46,  0xf3e42}, { 743,  0x1b231,  0x84155}, { 744,  0x5b283,  0xec2f5}, { 745,  0x2fb9f,  0xa4920}, { 746,  0x66812,  0xbec52}, { 747,  0x9409e,  0xd80ba}, { 748,  0x64866,  0xb789f}, { 749,  0x41584,  0x73389}, { 750,  0x3d06e,  0x71f8d}, { 751,  0x5e002,  0x89c2c}, { 752,  0x175b5,  0xeb6e8}, { 753,  0x51dac,  0xc098a}, { 754,  0x9bc92,  0xcc9cd}, { 755,  0x5a1b4,  0xf1bbb}, { 756,  0x9afa6,  0xbb1fe}, { 757,  0x3cf9b,  0x6d8a2}, { 758,  0xc3571,  0xc5782}, { 759,  0x97585,  0xc1e8b}, { 760,  0xb0224,  0xb4c5b}, { 761,  0xcbb7c,  0xe5b26}, { 762,  0x1fa62,  0x9ad1a}, { 763,  0x741ee,  0xf3f66}, { 764,  0x7848a,  0xa2981}, { 765,  0xa8807,  0xeb07a}, { 766,  0x44daa,  0x76f7b}, { 767,  0x5b1b,  0x1af5d}, { 768,  0x5c3eb,  0x89ceb}, { 769,  0x6046a,  0xa18df}, { 770,  0x7f183,  0xbd100}, { 771,  0x11e5f,  0x70432}, { 772,  0x6d5c7,  0xee96d}, { 773,  0x12ef5,  0x8c1e5}, { 774,  0x9c687,  0xa5f41}, { 775,  0x2da02,  0xcfa53}, { 776,  0x50639,  0xcfdb2}, { 777,  0x9a6b1,  0xc1480}, { 778,  0x418cd,  0xa67aa}, { 779,  0x18938,  0x1d649}, { 780,  0x653f9,  0x6fad0}, { 781,  0x6f6c,  0x60627}, { 782,  0x9d187,  0xd1c10}, { 783,  0x1b049,  0xb1bb4}, { 784,  0x87a28,  0xd8659}, { 785,  0x16d2a,  0x2a137}, { 786,  0x77de2,  0xae38a}, { 787,  0x563d7,  0xe4dad}, { 788,  0x57d2f,  0x6b1ab}, { 789,  0x7043a,  0x71360}, { 790,  0x82d5,  0xe331}, { 791,  0xa348c,  0xb26a4}, { 792,  0x52027,  0x9d6fe}, { 793,  0x24944,  0x4c3ef}, { 794,  0x9dd29,  0xd8042}, { 795,  0x15c0d,  0xe516a}, { 796,  0x2035f,  0x5d619}, { 797,  0x417bc,  0xb3f5c}, { 798,  0xa1ac6,  0xc262f}, { 799,  0x44ac2,  0xd33a1}, { 800,  0x9683d,  0xcc319}, { 801,  0x99cdc,  0xca345}, { 802,  0x1d53e,  0xda20b}, { 803,  0x81ee6,  0x9e6b9}, { 804,  0x3c28,  0xebfe}, { 805,  0x2d4c9,  0x3cdb2}, { 806,  0x5041e,  0x814c3}, { 807,  0x27260,  0xac0d0}, { 808,  0x490d4,  0xd940f}, { 809,  0x9d2f6,  0xbb780}, { 810,  0x2ed38,  0x36a4d}, { 811,  0x28d40,  0x6159a}, { 812,  0x3201e,  0xe2223}, { 813,  0x10991,  0x55020}, { 814,  0x49752,  0x6b5ac}, { 815,  0x50198,  0x6068d}, { 816,  0x276f5,  0x32d94}, { 817,  0x9c00,  0x5f594}, { 818,  0xc12f2,  0xd2725}, { 819,  0x1ae8e,  0xd7637}, { 820,  0xa380,  0xc40e}, { 821,  0xa4004,  0xd43b4}, { 822,  0x28478,  0xbfb8a}, { 823,  0x400fc,  0xb39f2}, { 824,  0x1db5e,  0x332ee}, { 825,  0x453c,  0xb3226}, { 826,  0x7067c,  0xf3337}, { 827,  0xbb7f5,  0xc6fe7}, { 828,  0x431bb,  0xd3c91}, { 829,  0x40cc1,  0xd25c5}, { 830,  0x671e7,  0x712fa}, { 831,  0x78725,  0xc50ed}, { 832,  0x8ddaa,  0xa291b}, { 833,  0x19a5d,  0x23f47}, { 834,  0x2a7ed,  0xc028a}, { 835,  0x7b00,  0x9b187}, { 836,  0x238be,  0x93e05}, { 837,  0x70c01,  0x83792}, { 838,  0x7cea,  0x1f53a}, { 839,  0x30984,  0xc1557}, { 840,  0x62b98,  0x9833d}, { 841,  0x32ae7,  0x527a5}, { 842,  0x47808,  0x7a056}, { 843,  0xb69a0,  0xd63da}, { 844,  0x9e28d,  0xcc52d}, { 845,  0x43511,  0xcdce4}, { 846,  0x703c0,  0xbe31c}, { 847,  0x34d3a,  0x7db51}, { 848,  0x94f56,  0xb4e18}, { 849,  0x1a445,  0x24fb2}, { 850,  0x4eb00,  0x9b1d4}, { 851,  0x7c7ce,  0xdb5b2}, { 852,  0x4a2b2,  0xa722c}, { 853,  0x72211,  0x9ae35}, { 854,  0x68490,  0x82060}, { 855,  0x2b8c6,  0xe6029}, { 856,  0x15026,  0xd59de}, { 857,  0x7f02b,  0x8f72f}, { 858,  0xb0b3,  0xcfd86}, { 859,  0x19d29,  0x7d449}, { 860,  0x55194,  0xda85f}, { 861,  0x418b7,  0xa7468}, { 862,  0x28e4f,  0xe2a2c}, { 863,  0x3b49c,  0x9ba9f}, { 864,  0x9030f,  0xb7c27}, { 865,  0x1cd65,  0xd00d8}, { 866,  0x248a8,  0x2b023}, { 867,  0x47cec,  0x8b88c}, { 868,  0xa1154,  0xbbc2a}, { 869,  0x4886a,  0xe70fd}, { 870,  0x32e9d,  0x7341b}, { 871,  0x184ef,  0xaf979}, { 872,  0x60109,  0xe160a}, { 873,  0xda23,  0x909f3}, { 874,  0x2fb7b,  0x7b8c7}, { 875,  0x8afdc,  0xe847f}, { 876,  0x279bc,  0xdd578}, { 877,  0xb9a86,  0xc9010}, { 878,  0xca8a8,  0xccf61}, { 879,  0x2d64d,  0xc7669}, { 880,  0x30bcc,  0xdcf1b}, { 881,  0xab3b,  0x6407a}, { 882,  0xbbf41,  0xe4c28}, { 883,  0x2e6d4,  0xb8eee}, { 884,  0xdce09,  0xebda8}, { 885,  0x33d85,  0x7c586}, { 886,  0x2ef2c,  0xaf6b6}, { 887,  0xc7649,  0xf0abb}, { 888,  0x3ff3f,  0x530ce}, { 889,  0x58ca4,  0xa0596}, { 890,  0x51c75,  0x97020}, { 891,  0x7be76,  0xc5101}, { 892,  0x558a5,  0xa5d26}, { 893,  0x6b097,  0x974a9}, { 894,  0x2184,  0xce25c}, { 895,  0x1ab40,  0xbe9ac}, { 896,  0x85703,  0xc56ca}, { 897,  0x17da4,  0xdbe1a}, { 898,  0xa6adf,  0xd9dfc}, { 899,  0xd91a,  0xf0e8b}, { 900,  0xf4df,  0x230d2}, { 901,  0x57859,  0x9d93d}, { 902,  0xa47e0,  0xea06f}, { 903,  0x76b5a,  0x8d201}, { 904,  0x803e1,  0xd321b}, { 905,  0x8e672,  0xb294d}, { 906,  0x56445,  0x6879c}, { 907,  0x350c7,  0x6a020}, { 908,  0x1c8c6,  0x81960}, { 909,  0x986fb,  0xe7227}, { 910,  0xa870,  0xe3d81}, { 911,  0x54c24,  0x63ac8}, { 912,  0x3e96f,  0x6b2de}, { 913,  0x4a2b1,  0x4b019}, { 914,  0x34857,  0xd25a9}, { 915,  0x938ba,  0x944c4}, { 916,  0x71ae0,  0xb182f}, { 917,  0x43bf9,  0xdfa20}, { 918,  0x2d3d0,  0x412ae}, { 919,  0x1d950,  0x89eaf}, { 920,  0x9cc1b,  0xe52f4}, { 921,  0x1ed7a,  0x8beb1}, { 922,  0x2d278,  0xef9cc}, { 923,  0x8296d,  0x9f25c}, { 924,  0xc299b,  0xe9f92}, { 925,  0x71859,  0xc3ba1}, { 926,  0xb1470,  0xc514e}, { 927,  0x58419,  0x7bc7e}, { 928,  0x11ede,  0xb4dd8}, { 929,  0x8de5d,  0x9aea4}, { 930,  0x75457,  0xd81c8}, { 931,  0x512d6,  0xd7edc}, { 932,  0x5d83f,  0x71402}, { 933,  0x99def,  0xcc219}, { 934,  0x1d935,  0x9b055}, { 935,  0xd3480,  0xef6c3}, { 936,  0x243e1,  0x7d25e}, { 937,  0x74985,  0xe8f5f}, { 938,  0x40240,  0xbb73b}, { 939,  0x5cacd,  0xed375}, { 940,  0xc3a1,  0x1e6bb}, { 941,  0x1ec8a,  0xc62c2}, { 942,  0x6e92b,  0xde37c}, { 943,  0x97bdc,  0x9b741}, { 944,  0x35bd8,  0xa0631}, { 945,  0x10822,  0x9c6d7}, { 946,  0x1cca7,  0x2e8db}, { 947,  0x4a6ea,  0x4c29c}, { 948,  0x5167d,  0x87908}, { 949,  0x4c4f0,  0xec6c8}, { 950,  0x4ca85,  0xd8765}, { 951,  0xabfdc,  0xcd7ef}, { 952,  0x191af,  0x4804b}, { 953,  0xa93ad,  0xf1a9d}, { 954,  0x49cf6,  0x4ce80}, { 955,  0xd516b,  0xe7f43}, { 956,  0x3bc44,  0xba6bb}, { 957,  0x25513,  0xeb733}, { 958,  0x1ee52,  0x5ede9}, { 959,  0x22df8,  0x29d58}, { 960,  0x52e1c,  0x8e4fb}, { 961,  0xbe3c6,  0xdb50f}, { 962,  0xeaf48,  0xf3965}, { 963,  0x513a6,  0x5165c}, { 964,  0x4426c,  0x88e3c}, { 965,  0x5ca21,  0xc85b9}, { 966,  0xa480,  0xdac61}, { 967,  0xbdeb7,  0xc7803}, { 968,  0x2a72c,  0xc7eff}, { 969,  0x5f43d,  0x69e49}, { 970,  0x33e54,  0x980ec}, { 971,  0xcc00b,  0xe9cfb}, { 972,  0x80ee4,  0xb62ca}, { 973,  0x738ae,  0x9d4de}, { 974,  0xade5a,  0xd9f42}, { 975,  0x35366,  0xc0f22}, { 976,  0x135c,  0x49467}, { 977,  0x62533,  0xd7a57}, { 978,  0xcde08,  0xe9e1a}, { 979,  0x66f7f,  0x7e8b4}, { 980,  0xbc52f,  0xdefcc}, { 981,  0x25b40,  0x4622b}, { 982,  0x3d538,  0xba954}, { 983,  0x4cade,  0xb88b4}, { 984,  0xc518,  0xeea0e}, { 985,  0x6ba76,  0xc0e5b}, { 986,  0xbe9d7,  0xd60fe}, { 987,  0x36dea,  0xe6bf0}, { 988,  0x40f18,  0xa0b5e}, { 989,  0xb0cdc,  0xd1791}, { 990,  0x3a3b3,  0xab315}, { 991,  0xaa2fb,  0xde1fc}, { 992,  0x8582,  0xed775}, { 993,  0x535b,  0x1a5bd}, { 994,  0xe9a62,  0xed586}, { 995,  0x6134f,  0x630d3}, { 996,  0x787e2,  0xba2ca}, { 997,  0x22ab1,  0x7ac87}, { 998,  0xe7123,  0xee3cd}, { 999,  0xeffc8,  0xf14fc}, { 1000,  0x1c03,  0x5ad64}, { 1001,  0xd0eef,  0xeec06}, { 1002,  0x8fe70,  0xd26b2}, { 1003,  0x1c28d,  0x49e0e}, { 1004,  0x898e,  0x3c2f4}, { 1005,  0x2b7f4,  0x79fb7}, { 1006,  0xd1889,  0xdab8a}, { 1007,  0x7576,  0x76aa5}, { 1008,  0x93475,  0xe9329}, { 1009,  0x290bd,  0x89a5f}, { 1010,  0x45584,  0x6bae9}, { 1011,  0x2daa2,  0x43a47}, { 1012,  0x591db,  0xad6d4}, { 1013,  0x65b75,  0x89551}, { 1014,  0x7d6c6,  0xe514d}, { 1015,  0x2406e,  0x6a5e0}, { 1016,  0x1362c,  0x81b6e}, { 1017,  0xca42f,  0xef63a}, { 1018,  0x48d8d,  0xc3007}, { 1019,  0x34bc6,  0xee83b}, { 1020,  0x422cd,  0xd7a08}, { 1021,  0x96da9,  0xd6726}, { 1022,  0x2bb49,  0xbfd77}, { 1023,  0x9863c,  0xbc748}}
	tree.(*BSTree).count = 1024
	tree.Build()

	from, to := make([]byte, 8), make([]byte, 8)
	binary.BigEndian.PutUint64(from, 824723)
	binary.BigEndian.PutUint64(to, 825021)

	st := NewSerial()
	st.(*serial).base = tree.(*BSTree).base

	cmpQueryWithSerial(t, tree, st, from, to, 0, false, false)
}

func TestMinimalTree(t *testing.T) {
	tree := New()
	tree.Push([]byte("3"), []byte("7"))
	tree.Build()
	fail := false
	result := tree.Query([]byte("1"), []byte("2"))
	if len(result) != 0 {
		fail = true
	}
	result = tree.Query([]byte("2"), []byte("3"))
	if len(result) != 1 {
		fail = true
	}
	if fail {
		t.Errorf("fail query minimal tree")
	}
}

func TestMinimalTree2(t *testing.T) {
	tree := New()
	tree.Push([]byte("1"), []byte("1"))
	tree.Build()
	if result := tree.Query([]byte("1"), []byte("1")); len(result) != 1 {
		t.Errorf("fail query minimal tree for (1, 1)")
	}
	if result := tree.Query([]byte("1"), []byte("2")); len(result) != 1 {
		t.Errorf("fail query minimal tree for (1, 2)")
	}
	if result := tree.Query([]byte("2"), []byte("3")); len(result) != 0 {
		t.Errorf("fail query minimal tree for (2, 3)")
	}
}

func TestNormalTree(t *testing.T) {
	tree := New()
	tree.Push([]byte("1"), []byte("1"))
	tree.Push([]byte("2"), []byte("3"))
	tree.Push([]byte("5"), []byte("7"))
	tree.Push([]byte("4"), []byte("6"))
	tree.Push([]byte("6"), []byte("9"))
	tree.Build()
	if result := tree.Query([]byte("3"), []byte("5")); len(result) != 3 {
		t.Errorf("fail query multiple tree for (3, 5)")
	}
	qvalid := map[string]int{
		"0": 0,
		"1": 1,
		"2": 1,
		"3": 1,
		"4": 1,
		"5": 2,
		"6": 3,
		"7": 2,
		"8": 1,
		"9": 1,
	}

	for k, v := range qvalid {
		if result := tree.Query([]byte(k), []byte(k)); len(result) != v {
			t.Errorf("fail query multiple tree for (%s, %s), exp: %d, got: %d", k, k, v, len(result))
		}
	}

	ct := tree.Clone()
	ct.Build()

	for k, v := range qvalid {
		if result := ct.Query([]byte(k), []byte(k)); len(result) != v {
			t.Errorf("fail query multiple tree for (%s, %s), exp: %d, got: %d", k, k, v, len(result))
		}
	}
}

func BenchmarkBuildSmallTree(b *testing.B) {

	tree := New()
	tree.Push([]byte{1}, []byte{1})
	tree.Push([]byte{2}, []byte{3})
	tree.Push([]byte{5}, []byte{7})
	tree.Push([]byte{4}, []byte{6})
	tree.Push([]byte{6}, []byte{9})
	tree.Push([]byte{9}, []byte{14})
	tree.Push([]byte{10}, []byte{13})
	tree.Push([]byte{11}, []byte{11})

	for i := 0; i < b.N; i++ {

		tree.Build()
	}
}

// Re-build a tree with 1024 ranges (no same element)
func BenchmarkBuildMidTree(b *testing.B) {

	tree := New()

	ftos := make([][]byte, 2048)
	for i := 0; i < 2048; i++ {
		ftos[i] = make([]byte, 8)
		binary.BigEndian.PutUint64(ftos[i], uint64(i))
	}
	sort.Sort(bytess(ftos))

	for i := 0; i < 2048; i += 2 {
		tree.Push(ftos[i], ftos[i+1])
	}

	b.ResetTimer()

	for i := 0; i < b.N; i++ {

		tree.Build()
	}
}

var tree Tree
var ser Tree

func init() {
	tree = New()
	ser = NewSerial()

	from, to := make([]byte, 8), make([]byte, 8)
	for j := 0; j < 2048; j += 2 {
		binary.BigEndian.PutUint64(from, uint64(j))
		binary.BigEndian.PutUint64(to, uint64(j+1))

		tree.Push(from, to)
		ser.Push(from, to)
	}
	tree.Build()
}

func BenchmarkQueryFullTree(b *testing.B) {

	from, to := make([]byte, 8), make([]byte, 8)
	binary.BigEndian.PutUint64(from, 0)
	binary.BigEndian.PutUint64(to, 2048)

	for i := 0; i < b.N; i++ {
		_ = tree.Query(from, to)
	}
}


func BenchmarkQueryFullTreeSerial(b *testing.B) {

	from, to := make([]byte, 8), make([]byte, 8)
	binary.BigEndian.PutUint64(from, 0)
	binary.BigEndian.PutUint64(to, 2048)

	for i := 0; i < b.N; i++ {
		_ = ser.Query(from, to)
	}
}

func BenchmarkQueryPartTree(b *testing.B) {

	for i := 1; i <= 1024; i *= 4 {
		b.Run(fmt.Sprintf("%d result", i), func(b *testing.B) {
			benchmarkQueryPart(b, tree, i)
		})
	}
}

func BenchmarkQueryPartTreeSerial(b *testing.B) {

	for i := 1; i <= 1024; i *= 4 {
		b.Run(fmt.Sprintf("%d result", i), func(b *testing.B) {
			benchmarkQueryPart(b, ser, i)
		})
	}
}

func benchmarkQueryPart(b *testing.B, t Tree, c int) {

	from, to := make([]byte, 8), make([]byte, 8)

	binary.BigEndian.PutUint64(from, 0)
	binary.BigEndian.PutUint64(to, uint64((c-1)*2))


	for i := 0; i < b.N; i++ {
		_ = t.Query(from, to)
	}
}

func BenchmarkQueryPoint(b *testing.B) {

	from := make([]byte, 8)
	binary.BigEndian.PutUint64(from, uint64(rand.Intn(2048)))

	for i := 0; i < b.N; i++ {
		_ = tree.QueryPoint(from)
	}
}


func BenchmarkQueryPointSerial(b *testing.B) {

	from := make([]byte, 8)
	binary.BigEndian.PutUint64(from, uint64(rand.Intn(2048)))

	for i := 0; i < b.N; i++ {
		_ = ser.QueryPoint(from)
	}
}

func BenchmarkQueryPointSerialCapacity(b *testing.B) {

	t := NewSerial()
	p := make([]byte, 8)
	binary.BigEndian.PutUint64(p, 1)

	for i := 4; i <= 1024; i *= 4 {

		b.Run(fmt.Sprintf("%d", i), func(b *testing.B) {
			benchmarkQueryPointCapacity(b, t, p, i)
		})
	}

}

func BenchmarkQueryPointCapacity(b *testing.B) {

	t := New()
	p := make([]byte, 8)
	binary.BigEndian.PutUint64(p, 1)

	for i := 4; i <= 1024; i *= 4 {


		b.Run(fmt.Sprintf("%d", i), func(b *testing.B) {

			benchmarkQueryPointCapacity(b, t, p, i)
		})

	}
}

func benchmarkQueryPointCapacity(b *testing.B, t Tree, point []byte, c int) {

	from, to := make([]byte, 8), make([]byte, 8)
	for j := 0; j < c*2; j += 2 {
		binary.BigEndian.PutUint64(from, uint64(j))
		binary.BigEndian.PutUint64(to, uint64(j+1))

		t.Push(from, to)
	}
	t.Build()
	defer t.Clear()

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		_ = t.QueryPoint(point)
	}
}